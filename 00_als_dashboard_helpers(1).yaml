################################################################################
# ALS DASHBOARD HELPERS v2.7 - DEDUPED + TEACH MAPPING FIX
# Author: Frank S Elaschat
# Updated: 2025-09-01
# Purpose: Support Memory Manager + Lovelace Dashboard
#
# CLAUDE FIXES (2025-09-14) - PYSCRIPT TOGGLE SPECIFIC:
# - Fixed PyScript toggle causing both rooms to go to 50%
# - Improved off-day brightness calculation when PyScript controller is ON
# - Fixed template calculation errors in progress sensor
################################################################################

input_boolean:

  sleep_in_ramp_active:
    name: "Sleep-in Ramp Active"
    icon: mdi:progress-clock
    initial: false
  bedroom_use_custom_settings:
    name: "Bedroom: Use Custom Intelligent Settings"
    icon: mdi:tune-variant
    initial: false
  living_room_use_custom_settings:
    name: "Living Room: Use Custom Intelligent Settings"
    icon: mdi:tune-variant
    initial: false
  living_room_evening_ramp_enabled:
    name: "Living Room: Enable Evening Ramp"
    icon: mdi:play-box-outline
    initial: true
  enable_weather_transitions:
    name: "Enable Smooth Weather Transitions"
    icon: mdi:weather-partly-cloudy
    initial: true
  kitchen_wled_enable:
    name: "Kitchen WLED Enable"
    icon: mdi:led-strip-variant
    initial: true
  manual_home_state_override:
    name: "Manual Home State Override"
    icon: mdi:account-wrench
    initial: false
  adaptive_learning_enabled:
    name: "Enable Adaptive Learning System"
    icon: mdi:brain
    initial: true
  kitchen_adaptive_override:
    name: "Kitchen Adaptive Override"
    icon: mdi:tune
    initial: false
  living_room_adaptive_override:
    name: "Living Room Adaptive Override"
    icon: mdi:tune
    initial: false
  bathroom_adaptive_override:
    name: "Bathroom Adaptive Override"
    icon: mdi:tune
    initial: false
  enable_evening_temperature_ramp:
    name: "Enable Evening Temperature Ramp"
    icon: mdi:thermometer-lines
    initial: true
  all_rooms_use_pyscript:
    name: "All Rooms: Use PyScript (OFF=YAML, ON=PyScript)"
    icon: mdi:toggle-switch
    initial: true
  intelligent_lighting_enable:
    name: "Enable Intelligent Lighting"
    icon: mdi:lightbulb-cog
    initial: true

input_select:
  home_state:
    name: "Home State"
    options:
      - "Early Morning"
      - "Day"
      - "Evening"
      - "Night"
      - "Away"
    icon: mdi:home-clock
  als_memory_condition_key:
    name: "Select Condition to Manage"
    options:
      - "Select a room first"
    icon: mdi:key-variant

  als_memory_sample:
    name: "Select Sample to Delete"
    options:
      - "Select a condition first"
    icon: mdi:target
    
  als_teaching_room:
    name: Room to Teach
    options:
      - Bedroom
      - Kitchen
      - Living Room
      - Hallway
      - Bathroom
      - Laundry
    initial: Bedroom
    icon: mdi:teach

input_number:
  value_index_to_delete:
    name: "Value Index to Delete"
    min: 0
    max: 99
    step: 1
    initial: 0
    icon: mdi:numeric

  als_teaching_brightness:
    name: Target Brightness
    min: 0
    max: 100
    step: 5
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-percent

  als_day_base_brightness:
    name: "Intelligent Day: Base Brightness"
    min: 10
    max: 50
    step: 5
    initial: 30
    unit_of_measurement: "%"
    icon: mdi:weather-sunny

  als_day_max_brightness:
    name: "Intelligent Day: Max Brightness"
    min: 50
    max: 100
    step: 5
    initial: 80
    unit_of_measurement: "%"
    icon: mdi:weather-sunny-alert

  als_cloudy_boost:
    name: "Intelligent Day: Cloudy Boost"
    min: 0
    max: 30
    step: 1
    initial: 15
    unit_of_measurement: "%"
    icon: mdi:weather-cloudy

  als_winter_boost:
    name: "Intelligent Day: Winter Boost"
    min: 0
    max: 20
    step: 1
    initial: 10
    unit_of_measurement: "%"
    icon: mdi:snowflake

  als_fall_boost:
    name: "Intelligent Day: Fall Boost"
    min: 0
    max: 15
    step: 1
    initial: 5
    unit_of_measurement: "%"
    icon: mdi:leaf

  bedroom_custom_day_brightness:
    name: "Bedroom Custom Day Brightness"
    min: 0
    max: 100
    step: 5
    initial: 60
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  bedroom_custom_day_temp:
    name: "Bedroom Custom Day Temperature"
    min: 2700
    max: 6500
    step: 100
    initial: 4500
    unit_of_measurement: "K"
    icon: mdi:thermometer

  bedroom_custom_evening_brightness:
    name: "Bedroom Custom Evening Brightness"
    min: 0
    max: 100
    step: 5
    initial: 40
    unit_of_measurement: "%"
    icon: mdi:brightness-4

  bedroom_custom_evening_temp:
    name: "Bedroom Custom Evening Temperature"
    min: 1800
    max: 4000
    step: 50
    initial: 2700
    unit_of_measurement: "K"
    icon: mdi:thermometer-low

  living_room_custom_day_brightness:
    name: "Living Room Custom Day Brightness"
    min: 0
    max: 100
    step: 5
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  living_room_custom_day_temp:
    name: "Living Room Custom Day Temperature"
    min: 2700
    max: 6500
    step: 100
    initial: 5000
    unit_of_measurement: "K"
    icon: mdi:thermometer

  living_room_custom_evening_brightness:
    name: "Living Room Custom Evening Brightness"
    min: 0
    max: 100
    step: 5
    initial: 35
    unit_of_measurement: "%"
    icon: mdi:brightness-4

  living_room_custom_evening_temp:
    name: "Living Room Custom Evening Temperature"
    min: 1800
    max: 4000
    step: 50
    initial: 2500
    unit_of_measurement: "K"
    icon: mdi:thermometer-low

  living_room_evening_start_brightness:
    name: "Living Room Evening Start Brightness"
    min: 0
    max: 100
    step: 5
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  living_room_evening_start_temp:
    name: "Living Room Evening Start Temperature"
    min: 1800
    max: 4000
    step: 50
    initial: 2700
    unit_of_measurement: "K"
    icon: mdi:thermometer

  living_room_evening_end_brightness:
    name: "Living Room Evening End Brightness"
    min: 0
    max: 100
    step: 5
    initial: 20
    unit_of_measurement: "%"
    icon: mdi:brightness-3

  living_room_evening_end_temp:
    name: "Living Room Evening End Temperature"
    min: 1800
    max: 3000
    step: 50
    initial: 2200
    unit_of_measurement: "K"
    icon: mdi:thermometer-low

  weather_transition_duration_minutes:
    name: "Weather Transition Duration (Minutes)"
    min: 1
    max: 15
    step: 1
    initial: 5
    unit_of_measurement: "min"
    icon: mdi:camera-iris

  kitchen_motion_timeout:
    name: "Kitchen Motion Timeout"
    min: 15
    max: 300
    step: 15
    initial: 30
    unit_of_measurement: "seconds"
    icon: mdi:timer

  kitchen_cloud_threshold:
    name: "Kitchen Cloud Threshold"
    min: 30
    max: 80
    step: 10
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:weather-cloudy

  kitchen_day_cloudy_brightness:
    name: "Kitchen Day Cloudy Brightness"
    min: 30
    max: 100
    step: 5
    initial: 60
    unit_of_measurement: "%"
    icon: mdi:brightness-5

  kitchen_day_sunny_brightness:
    name: "Kitchen Day Sunny Brightness"
    min: 0
    max: 100
    step: 5
    initial: 0
    unit_of_measurement: "%"
    icon: mdi:brightness-4

  kitchen_evening_brightness:
    name: "Kitchen Evening Brightness"
    min: 10
    max: 80
    step: 5
    initial: 35
    unit_of_measurement: "%"
    icon: mdi:brightness-3

  living_room_ramp_brightness_output:
    name: "Living Room Ramp Brightness Output"
    min: 0
    max: 100
    step: 1
    initial: 40
    unit_of_measurement: "%"
    icon: mdi:brightness-auto

  evening_ramp_start_temp:
    name: "Evening Ramp Start Temperature"
    min: 2000
    max: 6500
    step: 50
    initial: 4000
    unit_of_measurement: "K"
    icon: mdi:thermometer-plus

  evening_target_temp:
    name: "Evening Target Temperature"
    min: 1800
    max: 3000
    step: 50
    initial: 2000
    unit_of_measurement: "K"
    icon: mdi:thermometer-minus

  evening_catchup_minutes:
    name: "Evening Catchup Ramp Duration"
    min: 5
    max: 30
    step: 1
    initial: 15
    unit_of_measurement: "min"

  kitchen_override_brightness:
    name: "Kitchen Override Brightness"
    min: 0
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-7

  living_room_override_brightness:
    name: "Living Room Override Brightness"
    min: 0
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-7

  bathroom_override_brightness:
    name: "Bathroom Override Brightness"
    min: 0
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-7

  hallway_override_brightness:
    name: "Hallway Override Brightness"
    min: 0
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-7

  laundry_override_brightness:
    name: "Laundry Override Brightness"
    min: 0
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-7

  # Teaching Dashboard Controls
  kitchen_teach_brightness:
    name: "Kitchen Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    
  kitchen_teach_temperature:
    name: "Kitchen Teaching Temperature"
    min: 2200
    max: 6500
    step: 100
    initial: 3000
    unit_of_measurement: "K"
    icon: mdi:thermometer

  living_room_teach_brightness:
    name: "Living Room Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    
  living_room_teach_temperature:
    name: "Living Room Teaching Temperature"
    min: 2200
    max: 6500
    step: 100
    initial: 3000
    unit_of_measurement: "K"
    icon: mdi:thermometer

  bedroom_teach_brightness:
    name: "Bedroom Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    
  bedroom_teach_temperature:
    name: "Bedroom Teaching Temperature"
    min: 2200
    max: 6500
    step: 100
    initial: 3000
    unit_of_measurement: "K"
    icon: mdi:thermometer

  bathroom_teach_brightness:
    name: "Bathroom Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  hallway_teach_brightness:
    name: "Hallway Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  laundry_teach_brightness:
    name: "Laundry Teaching Brightness"
    min: 1
    max: 100
    step: 1
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-6

  # ===== ADDED LIVING ROOM FALLBACKS (2025-09-14) =====
  livingroom_fallback_day_brightness:
    name: "Livingroom Fallback Day Brightness"
    min: 0
    max: 100
    step: 1
    initial: 0
    unit_of_measurement: "%"
    icon: mdi:weather-sunny

  livingroom_fallback_evening_brightness:
    name: "Livingroom Fallback Evening Brightness"
    min: 0
    max: 100
    step: 1
    initial: 40
    unit_of_measurement: "%"
    icon: mdi:weather-sunset

  livingroom_fallback_night_brightness:
    name: "Livingroom Fallback Night Brightness"
    min: 0
    max: 100
    step: 1
    initial: 1
    unit_of_measurement: "%"
    icon: mdi:weather-night

input_button:
  als_teach_now:
    name: "ALS: Teach Now"
    icon: mdi:school
  als_reload_pyscript:
    name: "ALS: Reload Pyscript"
    icon: mdi:language-python
  als_run_test_engine:
    name: "ALS: Run Test Engine"
    icon: mdi:play-circleAn inter
  emergency_disable_morning_ramp:
    name: "Emergency Disable Morning Ramp"
    icon: mdi:stop-circle
  view_morning_ramp_patterns:
    name: "View Morning Ramp Patterns"
    icon: mdi:chart-line
  test_morning_ramp_motion:
    name: "Test Morning Ramp Motion"
    icon: mdi:test-tube
  force_end_morning_ramp:
    name: "Force End Morning Ramp"
    icon: mdi:stop
  view_ramp_debug_info:
    name: "View Ramp Debug Info"
    icon: mdi:bug

input_text:
  condition_key_to_manage:
    name: "Condition Key to Manage"
    max: 100
    initial: ""
  adaptive_memory_bedroom:
    name: "Adaptive Memory - Bedroom"
    max: 255
    initial: "{}"
  adaptive_memory_kitchen:
    name: "Adaptive Memory - Kitchen"
    max: 255
    initial: "{}"
  adaptive_memory_bathroom:
    name: "Adaptive Memory - Bathroom"
    max: 255
    initial: "{}"
  adaptive_memory_hallway:
    name: "Adaptive Memory - Hallway"
    max: 255
    initial: "{}"
  adaptive_memory_laundry:
    name: "Adaptive Memory - Laundry"
    max: 255
    initial: "{}"
  adaptive_memory_livingroom:
    name: "Adaptive Memory - Living Room"
    max: 255
    initial: "{}"
  als_error_bedroom:
    name: "ALS Error - Bedroom"
    max: 255
    initial: ""
  als_error_kitchen:
    name: "ALS Error - Kitchen"
    max: 255
    initial: ""
  als_error_bathroom:
    name: "ALS Error - Bathroom"
    max: 255
    initial: ""
  als_error_hallway:
    name: "ALS Error - Hallway"
    max: 255
    initial: ""
  als_error_laundry:
    name: "ALS Error - Laundry"
    max: 255
    initial: ""
  als_error_livingroom:
    name: "ALS Error - Living Room"
    max: 255
    initial: ""
  als_error_feed_bedroom:
    name: "ALS Error Feed - Bedroom"
    max: 255
    initial: "[]"
  als_error_feed_kitchen:
    name: "ALS Error Feed - Kitchen"
    max: 255
    initial: "[]"
  als_error_feed_bathroom:
    name: "ALS Error Feed - Bathroom"
    max: 255
    initial: "[]"
  als_error_feed_hallway:
    name: "ALS Error Feed - Hallway"
    max: 255
    initial: "[]"
  als_error_feed_laundry:
    name: "ALS Error Feed - Laundry"
    max: 255
    initial: "[]"
  als_error_feed_livingroom:
    name: "ALS Error Feed - Living Room"
    max: 255
    initial: "[]"
  als_last_teach_status:
    name: "ALS Last Teach Status"
    max: 255
    initial: ""

input_datetime:
  evening_ramp_started:
    name: "Evening Temperature Ramp Start Time"
    has_date: true
    has_time: true
    icon: mdi:clock-start
  evening_target_time:
    name: "Evening Target Time"
    has_date: false
    has_time: true
    initial: "21:00:00"
    icon: mdi:clock-end

template:
  - binary_sensor:
      - name: "ALS System Error Detected"
        availability: >-
          {{ states('input_text.als_error_bedroom') not in ['unknown', 'unavailable'] }}
        state: >-
          {% set rooms = ['bedroom', 'kitchen', 'bathroom', 'hallway', 'laundry', 'livingroom'] %}
          {% set errors = namespace(count=0) %}
          {% for room in rooms %}
            {% if states('input_text.als_error_' ~ room) not in ['', 'unknown', 'unavailable'] %}
              {% set errors.count = errors.count + 1 %}
            {% endif %}
          {% endfor %}
          {{ errors.count > 0 }}
        icon: >-
          {{ 'mdi:check-circle' if this.state == 'off' else 'mdi:alert-circle' }}
        attributes:
          error_count: >-
            {% set rooms = ['bedroom', 'kitchen', 'bathroom', 'hallway', 'laundry', 'livingroom'] %}
            {% set errors = namespace(count=0) %}
            {% for room in rooms %}
              {% if states('input_text.als_error_' ~ room) not in ['', 'unknown', 'unavailable'] %}
                {% set errors.count = errors.count + 1 %}
              {% endif %}
            {% endfor %}
            {{ errors.count }}
          error_rooms: >-
            {% set error_list = [] %}
            {% for room in ['bedroom', 'kitchen', 'bathroom', 'hallway', 'laundry', 'livingroom'] %}
              {% if states('input_text.als_error_' ~ room) not in ['', 'unknown', 'unavailable'] %}
                {% set error_list = error_list + [room|title] %}
              {% endif %}
            {% endfor %}
            {{ error_list | join(', ') if error_list else 'None' }}

  - sensor:
      - name: "ALS System Overview"
        availability: >-
          {{ states('input_boolean.adaptive_learning_enabled') not in ['unknown', 'unavailable'] }}
        state: >-
          {% set adaptive_enabled = is_state('input_boolean.adaptive_learning_enabled', 'on') %}
          {% set intelligent_enabled = is_state('input_boolean.intelligent_lighting_enable', 'on') %}
          {% set home_state = states('input_select.home_state') | default('Home') %}
          {% set errors = is_state('binary_sensor.als_system_error_detected', 'on') %}
          
          {% if errors %} System Errors
          {% elif not adaptive_enabled and not intelligent_enabled %} All Systems Disabled
          {% elif home_state == 'Away' %} Away Mode Active
          {% elif adaptive_enabled and intelligent_enabled %} Full System Active
          {% elif adaptive_enabled %} Adaptive Learning Only
          {% elif intelligent_enabled %} Intelligent Lighting Only
          {% else %} Manual Mode
          {% endif %}
        icon: >-
          {% set status = this.state %}
          {% if 'Errors' in status %} mdi:alert-circle
          {% elif 'Away' in status %} mdi:home-export-outline
          {% elif 'Full System' in status %} mdi:brain
          {% elif 'Disabled' in status %} mdi:power-off
          {% else %} mdi:lightbulb-auto
          {% endif %}
        attributes:
          adaptive_learning: "{{ 'Enabled' if is_state('input_boolean.adaptive_learning_enabled', 'on') else 'Disabled' }}"
          intelligent_lighting: "{{ 'Enabled' if is_state('input_boolean.intelligent_lighting_enable', 'on') else 'Disabled' }}"
          home_mode: "{{ states('input_select.home_state') | default('Unknown') }}"
          evening_ramp: "{{ 'Active' if is_state('input_boolean.enable_evening_temperature_ramp', 'on') else 'Inactive' }}"
          weather_transitions: "{{ 'Enabled' if is_state('input_boolean.enable_weather_transitions', 'on') else 'Disabled' }}"

      - name: "ALS Room Status Summary"
        availability: >-
          {{ states('input_select.home_state') not in ['unknown', 'unavailable'] }}
        state: >-
          {% set rooms = ['bedroom', 'kitchen', 'bathroom', 'hallway', 'laundry', 'livingroom'] %}
          {% set active_count = 0 %}
          {% set error_count = 0 %}
          
          {% for room in rooms %}
            {% set room_name = room | replace('livingroom', 'living_room') %}
            {% if room == 'laundry' %}{% set room_name = 'laundry_room' %}{% endif %}
            {% set target_sensor = 'sensor.' ~ room_name ~ '_target_brightness' %}
            
            {% if states(target_sensor) | int(-1) > 0 %}
              {% set active_count = active_count + 1 %}
            {% endif %}
            
            {% if states('input_text.als_error_' ~ room) not in ['', 'unknown', 'unavailable'] %}
              {% set error_count = error_count + 1 %}
            {% endif %}
          {% endfor %}
          
          {% if error_count > 0 %}
            {{ error_count }} Room Errors
          {% elif active_count == 0 %}
            All Lights Off
          {% else %}
            {{ active_count }}/6 Rooms Active
          {% endif %}
        icon: >-
          {% if 'Errors' in this.state %} mdi:alert-circle
          {% elif 'All Lights Off' in this.state %} mdi:lightbulb-off
          {% else %} mdi:lightbulb-multiple
          {% endif %}
        attributes:
          bedroom_brightness: "{{ states('sensor.bedroom_target_brightness') | int(0) }}%"
          kitchen_brightness: "{{ states('sensor.kitchen_target_brightness') | int(0) }}%"
          bathroom_brightness: "{{ states('sensor.bathroom_target_brightness') | int(0) }}%"
          hallway_brightness: "{{ states('sensor.hallway_target_brightness') | int(0) }}%"
          laundry_brightness: "{{ states('sensor.laundry_room_target_brightness') | int(0) }}%"
          living_room_brightness: "{{ states('sensor.living_room_target_brightness') | int(0) }}%"

      - name: "Temperature Ramp Status"
        unique_id: temperature_ramp_status
        availability: >-
          {{ states('input_select.home_state') not in ['unknown','unavailable']
             and states('input_datetime.evening_mode_start') not in ['unknown','unavailable'] }}
        state: >-
          {% if is_state('input_select.home_state', 'Evening') %}
            {% set start_time_str = states('input_datetime.evening_mode_start') %}
            {% set target_time = today_at('20:00:00') %}
            {% if start_time_str not in ['', 'unknown', 'unavailable'] %}
              {% set start_timestamp = start_time_str | as_timestamp %}
              {% set target_timestamp = target_time.timestamp() %}
              {% set now_timestamp = now().timestamp() %}
              {% set elapsed = now_timestamp - start_timestamp %}
              {% set total = target_timestamp - start_timestamp %}
              {% set progress = (elapsed / total * 100) | round(1) if total > 60 else 0 %}
              {{ progress }}% Complete
            {% else %}Starting Up
            {% endif %}
          {% else %}Not Active
          {% endif %}
        icon: mdi:thermometer

      - name: "Evening Mode Real Time"
        unique_id: evening_mode_real_time
        availability: >-
          {{ states('input_datetime.evening_mode_start') not in ['unknown','unavailable'] }}
        state: >-
          {% if states('input_datetime.evening_mode_start') not in ['', 'unknown', 'unavailable'] %}
            {% set start_timestamp = states('input_datetime.evening_mode_start') | as_timestamp %}
            {% set now_timestamp = now().timestamp() %}
            {{ ((now_timestamp - start_timestamp) / 60) | round(1) }}
          {% else %}0
          {% endif %}
        unit_of_measurement: "min"
        icon: mdi:clock
        attributes:
          minutes_since_evening_start: >-
            {% if states('input_datetime.evening_mode_start') not in ['', 'unknown', 'unavailable'] %}
              {% set start_timestamp = states('input_datetime.evening_mode_start') | as_timestamp %}
              {% set now_timestamp = now().timestamp() %}
              {{ ((now_timestamp - start_timestamp) / 60) | round(1) }}
            {% else %}0
            {% endif %}
          formatted_time: >-
            {% if states('input_datetime.evening_mode_start') not in ['', 'unknown', 'unavailable'] %}
              {% set start_timestamp = states('input_datetime.evening_mode_start') | as_timestamp %}
              {% set now_timestamp = now().timestamp() %}
              {{ ((now_timestamp - start_timestamp) / 60) | round(1) }} minutes ago
            {% else %}Not started
            {% endif %}

      # Morning Ramp System Status Sensors
      - name: "Morning Ramp Current Status"
        unique_id: morning_ramp_current_status
        state: >-
          {% if is_state('input_boolean.sleep_in_ramp_active', 'on') %}
            Ramp Active
          {% elif is_state('input_boolean.sleep_in_ramp_system_enable', 'on') %}
            Ready for Motion
          {% else %}
            System Disabled
          {% endif %}
        icon: >-
          {% if is_state('input_boolean.sleep_in_ramp_active', 'on') %}
            mdi:progress-clock
          {% elif is_state('input_boolean.sleep_in_ramp_system_enable', 'on') %}
            mdi:motion-sensor
          {% else %}
            mdi:stop-circle
          {% endif %}

      - name: "Morning Ramp Predicted End Time"
        unique_id: morning_ramp_predicted_end_time
        state: >-
          {% if states('input_datetime.ramp_calculated_end_time') not in ['unknown', 'unavailable'] %}
            {{ state_attr('input_datetime.ramp_calculated_end_time', 'timestamp') | timestamp_custom('%I:%M %p') }}
          {% else %}
            Not calculated
          {% endif %}
        icon: mdi:clock-outline

      - name: "Morning Ramp Time Remaining"
        unique_id: morning_ramp_time_remaining
        state: >-
          {% if is_state('input_boolean.sleep_in_ramp_active', 'on') and states('input_datetime.ramp_calculated_end_time') not in ['unknown', 'unavailable'] %}
            {% set end_time = state_attr('input_datetime.ramp_calculated_end_time', 'timestamp') %}
            {% set remaining = (end_time - now().timestamp()) / 60 %}
            {% if remaining > 0 %}
              {{ remaining | round(0) }} minutes
            {% else %}
              Complete
            {% endif %}
          {% else %}
            N/A
          {% endif %}
        icon: mdi:timer-outline

      - name: "Sleep In Ramp Progress"
        unique_id: sleep_in_ramp_progress
        unit_of_measurement: "%"
        state: >-
          {{ states('sensor.trial_morning_progress') | float(0) }}

      - name: "Sleep In Ramp Brightness"
        unique_id: sleep_in_ramp_brightness
        unit_of_measurement: "%"
        state: >-
          {{ states('sensor.trial_morning_brightness') | float(0) }}

      - name: "Sleep In Ramp Temperature"
        unique_id: sleep_in_ramp_temperature
        unit_of_measurement: "K"
        state: >-
          {{ states('sensor.trial_morning_temperature') | float(0) }}

      - name: "Morning Ramp Duration Minutes"
        unique_id: morning_ramp_duration_minutes
        unit_of_measurement: "min"
        state: >-
          {% if states('input_datetime.ramp_start_time') not in ['unknown', 'unavailable'] and states('input_datetime.ramp_calculated_end_time') not in ['unknown', 'unavailable'] %}
            {% set start_time = state_attr('input_datetime.ramp_start_time', 'timestamp') %}
            {% set end_time = state_attr('input_datetime.ramp_calculated_end_time', 'timestamp') %}
            {{ ((end_time - start_time) / 60) | round(0) }}
          {% else %}
            0
          {% endif %}

      - name: "Morning Ramp Elapsed Minutes"
        unique_id: morning_ramp_elapsed_minutes
        unit_of_measurement: "min"
        state: >-
          {% if is_state('input_boolean.sleep_in_ramp_active', 'on') and states('input_datetime.ramp_start_time') not in ['unknown', 'unavailable'] %}
            {% set start_time = state_attr('input_datetime.ramp_start_time', 'timestamp') %}
            {{ ((now().timestamp() - start_time) / 60) | round(0) | max(0) }}
          {% else %}
            0
          {% endif %}

      # Additional Morning Ramp Placeholder Sensors (Updated by PyScript)
      - name: "Morning Ramp Learned Duration"
        unique_id: morning_ramp_learned_duration
        unit_of_measurement: "min"
        state: "45"
        icon: mdi:school

      - name: "Morning Ramp Confidence Level"
        unique_id: morning_ramp_confidence_level
        unit_of_measurement: "%"
        state: "50"
        icon: mdi:gauge

      - name: "Morning Ramp Weather Adjustment"
        unique_id: morning_ramp_weather_adjustment
        unit_of_measurement: "min"
        state: "0"
        icon: mdi:weather-cloudy

      - name: "Morning Ramp Last Completion Time"
        unique_id: morning_ramp_last_completion_time
        state: "Not recorded"
        icon: mdi:history

      - name: "Morning Ramp Trigger Source"
        unique_id: morning_ramp_trigger_source
        state: >-
          {% if is_state('input_boolean.sleep_in_ramp_active', 'on') %}
            Kitchen Motion
          {% else %}
            Waiting
          {% endif %}
        icon: mdi:gesture-tap

      - name: "Morning Ramp Learning Data Count"
        unique_id: morning_ramp_learning_data_count
        unit_of_measurement: "samples"
        state: "0"
        icon: mdi:database

      - name: "Morning Ramp Prediction Accuracy"
        unique_id: morning_ramp_prediction_accuracy
        unit_of_measurement: "%"
        state: "0"
        icon: mdi:target

      - name: "Morning Ramp Actual Duration"
        unique_id: morning_ramp_actual_duration
        unit_of_measurement: "min"
        state: "0"
        icon: mdi:timer

      - name: "Morning Ramp Predicted Duration"
        unique_id: morning_ramp_predicted_duration
        unit_of_measurement: "min"
        state: "45"
        icon: mdi:timer-sand

      - name: "ALS Last Teach Status"
        unique_id: als_last_teach_status
        state: "No recent teaching"
        icon: mdi:school



  - binary_sensor:
      - name: "Home State Diverged"
        unique_id: home_state_diverged
        state: >-
          {{ states('pyscript.home_state') not in ['unknown','unavailable',''] and
             states('input_select.home_state') not in ['unknown','unavailable',''] and
             states('pyscript.home_state') != states('input_select.home_state') }}
        icon: mdi:scale-unbalanced
automation:
  - id: als_auto_error_cleanup
    alias: "ALS - Auto Error Cleanup"
    description: "Automatically clears resolved errors after 1 hour"
    mode: restart
    trigger:
      - trigger: time_pattern
        hours: "/1"
    condition:
      - condition: state
        entity_id: binary_sensor.als_system_error_detected
        state: "on"
    action:
      - repeat:
          for_each:
            - bedroom
            - kitchen
            - bathroom
            - hallway
            - laundry
            - livingroom
          sequence:
            - variables:
                room: "{{ repeat.item }}"
                error_entity: "input_text.als_error_{{ room }}"
            - if:
                - condition: template
                  value_template: "{{ states(error_entity) not in ['', 'unknown', 'unavailable'] }}"
                - condition: template
                  value_template: >-
                    {% set room_name = room | replace('livingroom', 'living_room') %}
                    {% if room == 'laundry' %}{% set room_name = 'laundry_room' %}{% endif %}
                    {% set target_sensor = 'sensor.' ~ room_name ~ '_target_brightness' %}
                    {{ states(target_sensor) not in ['unknown', 'unavailable'] }}
              then:
                - action: input_text.set_value
                  target:
                    entity_id: "{{ error_entity }}"
                  data:
                    value: ""

  - id: als_teach_button_bridge
    alias: "ALS - Teach Button Bridge"
    mode: single
    trigger:
      - trigger: state
        entity_id: input_button.als_teach_now
    action:
      - variables:
          sel: "{{ states('input_select.als_teaching_room') }}"
          room_key: >-
            {% set map = {
              'Bedroom':'bedroom',
              'Kitchen':'kitchen',
              'Living Room':'livingroom',
              'Hallway':'hallway',
              'Bathroom':'bathroom',
              'Laundry':'laundry'
            } %}
            {{ map.get(sel, 'kitchen') }}
          brightness: "{{ states('input_number.als_teaching_brightness') | int(50) }}"
      - action: pyscript.als_teach_room
        data:
          room: "{{ room_key }}"
          brightness: "{{ brightness }}"
      - action: input_text.set_value
        target:
          entity_id: input_text.als_last_teach_status
        data:
          value: "Taught {{ room_key }} → {{ brightness }}% at {{ now().strftime('%H:%M:%S') }}"

  - id: als_reload_pyscript_button
    alias: "ALS - Reload Pyscript Button"
    mode: single
    trigger:
      - trigger: state
        entity_id: input_button.als_reload_pyscript
    action:
      - action: pyscript.reload
      - action: input_text.set_value
        target:
          entity_id: input_text.als_last_teach_status
        data:
          value: "Pyscript reloaded at {{ now().strftime('%H:%M:%S') }}"

  - id: als_run_test_engine_button
    alias: "ALS - Run Test Engine Now"
    mode: single
    trigger:
      - trigger: state
        entity_id: input_button.als_run_test_engine
    action:
      - action: pyscript.parallel_test_run_now
      - action: input_text.set_value
        target:
          entity_id: input_text.als_last_teach_status
        data:
          value: "Test engine wrote values at {{ now().strftime('%H:%M:%S') }}"


  - id: pyscript_to_home_state_ui_authoritative
    alias: "Home State (Authoritative): Controller → UI"
    mode: restart
    trigger:
      - trigger: state
        entity_id: pyscript.home_state
    condition:
      - condition: template
        value_template: "{{ states('pyscript.home_state') != states('input_select.home_state') }}"
    action:
      - action: input_select.select_option
        target:
          entity_id: input_select.home_state
        data:
          option: "{{ states('pyscript.home_state') }}"

  - id: home_state_ui_to_pyscript_override_only
    alias: "Home State (Override Only): UI → Controller"
    mode: single
    trigger:
      - trigger: state
        entity_id: input_select.home_state
    condition:
      - condition: state
        entity_id: input_boolean.manual_home_state_override
        state: "on"
      - condition: template
        value_template: "{{ states('input_select.home_state') != states('pyscript.home_state') }}"
    action:
      - action: pyscript.set_home_mode
        data:
          mode: "{{ states('input_select.home_state') }}"

  - id: home_state_ui_guard_override_off_strict
    alias: "Home State Guard: Snap UI Back (Override OFF)"
    mode: restart
    trigger:
      - trigger: state
        entity_id: input_select.home_state
    condition:
      - condition: state
        entity_id: input_boolean.manual_home_state_override
        state: "off"
      - condition: template
        value_template: "{{ states('input_select.home_state') != states('pyscript.home_state') }}"
    action:
      - action: input_select.select_option
        target:
          entity_id: input_select.home_state
        data:
          option: "{{ states('pyscript.home_state') }}"

  - id: home_state_reconciler_authoritative
    alias: "Home State Reconciler (Controller Wins)"
    mode: restart
    trigger:
      - trigger: state
        entity_id: binary_sensor.home_state_diverged
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.manual_home_state_override
        state: "off"
    action:
      - action: input_select.select_option
        target:
          entity_id: input_select.home_state
        data:
          option: "{{ states('pyscript.home_state') }}"

  - id: home_state_startup_sync
    alias: "Home State Startup Sync: Controller → UI"
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
      - trigger: event
        event_type: pyscript_reload
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {{ states('pyscript.home_state') not in ['unknown','unavailable',''] }}
            sequence:
              - action: input_select.select_option
                target:
                  entity_id: input_select.home_state
                data:
                  option: "{{ states('pyscript.home_state') }}"
script:
  als_clear_all_errors:
    alias: "ALS - Clear All Errors"
    sequence:
      - repeat:
          for_each:
            - bedroom
            - kitchen
            - bathroom
            - hallway
            - laundry
            - livingroom
          sequence:
            - action: input_text.set_value
              target:
                entity_id: "input_text.als_error_{{ repeat.item }}"
              data:
                value: ""
      - action: logbook.log
        data:
          name: "ALS System"
          message: "All room errors manually cleared"

  als_system_reset:
    alias: "ALS - System Reset"
    sequence:
      - action: script.als_clear_all_errors
      - action: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.kitchen_adaptive_override
            - input_boolean.living_room_adaptive_override
            - input_boolean.bathroom_adaptive_override
      # Avoid invalid empty datetime; set to now() to re-baseline ramp timing.
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.evening_ramp_started
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - action: logbook.log
        data:
          name: "ALS System"
          message: "Complete system reset performed"
